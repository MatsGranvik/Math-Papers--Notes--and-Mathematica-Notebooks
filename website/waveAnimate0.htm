<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    <!--
    <script type="text/javascript"src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    <script type="text/x-mathjax-config">MathJax.Hub.Config({TeX: {extensions: ["color.js"]}, tex2jax: {inlineMath: [["$","$"],["\\(","\\)"]]}});</script>
    -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/katex.min.css" integrity="sha384-wITovz90syo1dJWVh32uuETPVEtGigN07tkttEqPv+uR2SE/mbQcG7ATL28aI9H0" crossorigin="anonymous">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/katex.min.js" integrity="sha384-/y1Nn9+QQAipbNQWU65krzJralCnuOasHncUFXGkdwntGeSvQicrYkiUBwsgUqc1" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/contrib/auto-render.min.js" integrity="sha384-dq1/gEHSxPZQ7DdrM82ID4YVol9BYyU7GbWlIwnwyPzotpoc57wDw/guX8EaYGPx" crossorigin="anonymous"></script>

    <script src="zetalist.js"></script>

    <link rel="stylesheet" href="css/IceCream.css" type="text/css" />
    <title></title>
    <style type="text/css">
        body {
            background: #ffffff;
            color: #000000;
            font-family: arial;
            font-size: 90%;
        }

        .wrap {
            width: 800px;
            margin: 0 auto;
        }

        canvas {
            border: 0px solid #0f0;
        }

        a {
            color: #0f0;
        }
    </style>
    <script>

        var Power = Math.pow, Cos = Math.cos, Sin = Math.sin, Log = Math.log, fl = Math.floor;

        function parm(name, def) { return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)').exec(location.search) || [null, ''])[1].replace(/\+/g, '%20')) || def; }

        var curZero = 0;
        var watchingZeros = false;
        var onAZero = false;

        var ampf = amp = 0, isAbs = parseInt(parm("isAbs", 0)), baseHscale = parseFloat(parm("hscale", 0)), doCircle = parseInt(parm("doCircle", 0));
        function setup() {
            function log(x) { return Math.log(x); } function pow(x, y) { return Math.pow(x, y); } function cos(x) { return Math.cos(x); } function sin(x) { return Math.sin(x); }
            function intg(x, A, f) { return pow(x, (1 + A)) / (pow((1 + A), 2) + pow(f, 2)) * ((1 + A) * cos(f * log(x)) + f * sin(f * log(x))); }
            function intg2(x, A, f) { return pow(x, (1 + A)) / (pow((1 + A), 2) + pow(f, 2)) * ((1 + A) * sin(f * log(x)) - f * cos(f * log(x))); }

            var bkg = new Image(); bkg.src = 'backgroundwhite.png';
            var img = new Image(); img.src = 'blueorb.png';
            var imgred = new Image(); imgred.src = 'redorb.png';

            var canvas = document.getElementById('Canvas2D'), c = canvas.getContext('2d');

            var samps = 1;
            var hscale = 5;

            if (baseHscale != 0) hscale = baseHscale;

            function drawStart() {
                c.fillStyle = "rgba(255, 255, 255, 1)";
                c.fillRect(0, 0, 800, 600);
                c.drawImage(bkg, 0, 0);
                c.fillStyle = "gray"; c.font = "bold 32px Times";
                c.fillText("f=" + Math.floor(fre * 100) / 100, 320, 50);
                c.fillStyle = "gray"; c.font = "bold 10px Times";
                c.fillText("x", 34, (!isAbs ? 320 : 520) - 16);
                for (var v = 0; v < 700; v += 50) {
                    c.fillText("" + (v * samps), 50 + v, (!isAbs ? 320 : 520));
                }
                c.fillText("y", 56, 40);
                for (var v = -200; v <= 200; v += 10) {
                    var they = (!isAbs ? 320 : 520) + v * hscale;
                    if (they > 60 && they < 580) c.fillText("" + (v), 50, they);
                }
            }

            var freSrc = parseFloat(parm("freqStart", 1000)) - (doCircle ? 0:2);
            var ampSrc = parseFloat(parm("ampStart", 0));

            if (ampSrc === -.5) watchingZeros = true;

            amp = ampSrc;

            var fre = freSrc, tick = 0;

            var adder = 0;

            var tick = 0;

            var zeroBoost = 0;

            var zeros = zetaZerosLong;//[];
            for (var k = 0; k < 15000; k++) zeros.push(k);

            if (watchingZeros) {
                if (fre > zeros[zeros.length - 1]) {
                    watchingZeros = false;
                }
                while (fre > zeros[curZero] && curZero < zeros.length ) {
                    curZero++;
                }
                if (curZero == zeros.length) {
                    watchingZeros = false;
                }
            }

            var zeroPause = 0;

            function render() {
                
                ampf = ampf * .7 + amp * .3;

                zeroBoost = zeroBoost * .7;

                if (zeroPause > 0) {
                    zeroPause--;
                }
                else {
                    tick++;
                    //ampf = Math.cos(tick * .02);
                    if (doCircle) {
                        adder += .2;
                    }
                    else {
                        fre += .03;
                    }
                }

                drawStart();
                var sum = 0, sum2 = 0, i2 = 0;
                var sumx = 0, sumi = 0;


                if (watchingZeros) {
                    onAZero = false;
                    if (fre > zeros[curZero]) {
                        onAZero = true;
                        zeroBoost = 8;
                        zeroPause = 6;
                        curZero++;
                    }
                    if (curZero >= zeros.length) {
                        watchingZeros = false;
                    }
                }

                samps = 1;
                if (fre > 2000) { samps = 2; hscale = 4; }
                if (fre > 5000) { samps = 3; hscale = 3; }
                if (fre > 8000) { samps = 4; hscale = 2; }

                if (baseHscale != 0) hscale = baseHscale;

                // amp 1 -> hscale = .1
                // to
                // amp -1 -> hscale = 30
                
                //var rr = (-ampf + 1)/2;
                //hscale = Math.pow( 1.1, 80*rr )/10;//10*(1.01-ampf);

                for (i = 1; i < 700; i++) {
                    for (var t = 0; t < samps; t++) {
                        i2++;

                        //sm[x]=pow(x,A)*cos(f*log(x))+sumg(x-1,A,f,sm);}
                        sum += pow(i2, ampf) * (cos(adder + fre * log(i2)));
                        sum2 += pow(i2, ampf) * (sin(adder + fre * log(i2)));
                    }
                    if (isAbs) {
                        var full = Math.sqrt(sum * sum + sum2 * sum2);
                        c.drawImage(img, 50 + i, 500 - full * hscale, 4 + zeroBoost, 4 + zeroBoost);
                        c.drawImage(img, 50 + i, 500, 4, 1);
                    }
                    else {
                        //c.drawImage(img, 50 + i, 300 - (sum - intg(i2, ampf, fre)) * hscale, 4, 4);
                        c.drawImage(img, 50 + i, 300 - (sum) * hscale, 4 + zeroBoost, 4 + zeroBoost);
                        //c.drawImage(img, 50 + i, 300 - (ampf * sum - fre * sum2) * hscale, 4 + zeroBoost, 4 + zeroBoost);
                        if (!doCircle) {
                            //c.drawImage(imgred, 50 + i, 300 - (sum2 - intg2(i2, ampf, fre)) * hscale, 4, 4);
                            c.drawImage(imgred, 50 + i, 300 - (sum2) * hscale, 4 + zeroBoost, 4 + zeroBoost);
                            //c.drawImage(imgred, 50 + i, 300 - (ampf * sum2 + fre * sum ) * hscale, 4 + zeroBoost, 4 + zeroBoost);
                        }

                        //c.drawImage(img, 50 + i, 300 - (sum-intg(i2,ampf, fre) ) * hscale, 4, 4);
                        //c.drawImage(imgred, 50 + i, 300 - (sum2-intg2(i2,ampf, fre)) * hscale, 4, 4);

                        c.drawImage(img, 50 + i, 300, 4, 1);
                    }
                }

            }
            var loop = setInterval(function () { render(); }, 1000 / 30);
        }
        var interval = setInterval(function () { if (typeof Stats == 'function') { clearInterval(interval); } }, 100);
    </script>
</head>
<body onload="setup();">

    <div id="pageouter">
        <div id="page2"><div id="content2"><img src="art/edgea.png" /></div></div>
        <div id="page">
            <div id="content7">
                <br />
                <div id="loader"><img src="backgroundwhite.png"><img src="blueorb.png"><img src="redorb.png"></div>
                <div id="titleCircle"><center><h2>Animating $\displaystyle\sum_{t=1}^x t^A \cdot \cos( f \cdot \log t + \theta)$</h2></center></div>
                <div id="title0"><center><h2>Animating $\displaystyle\sum_{t=1}^x t^{f \cdot i}$</h2></center></div>
                <div id="titleonehalf"><center><h2>Animating $\displaystyle\sum_{t=1}^x t^{-\frac{1}{2}+f \cdot i}$</h2></center></div>
                <div id="titleonehalfabs"><center><h3>$$y=((\sum_{t=1}^x t^{-\frac{1}{2}} \cdot \cos(f \log t))^2 + (\sum_{t=1}^x t^{-\frac{1}{2}} \cdot \sin(f \log t))^2)^{1 \over 2}$$</h3></center></div>
                <div id="title1">
                    <div id="para">The blue curve is the real part of this sum, and the red curve is the imaginary part, with $\textrm{blue }y= \sum_{t=1}^x \cos(f \log t)$ and $\textrm{red }y = \sum_{t=1}^x \sin(f \log t)$.</div>
                    <br />
                </div>
                <div id="title0abs"><h3>$$y=((\sum_{t=1}^x \cos(f \log t))^2 + (\sum_{t=1}^x \sin(f \log t))^2)^{1 \over 2}$$</h3></div>

                <div class="wrap"><canvas id="Canvas2D" width="800" height="600"></canvas></div>

                <div id="para"></div>
                <div id="para">And remember, from our experiments: if we take waves that go off the right side of the graph, and we draw a horizontal line through their center, the y-value of that line has coincided with the Riemann Zeta function, $\zeta(-f \cdot i)$.</div>
                <div id="para"></div>
                <script>
                    document.getElementById('loader').style.display = 'none';

                    var showCircle = ((parseFloat(parm("doCircle", 0))) == 1 ? true : false);
                    var showHalf = ((parseFloat(parm("ampStart", 0))) == -.5 ? true : false) && (isAbs == false) && (showCircle == false);
                    var showHalfAbs = ((parseFloat(parm("ampStart", 0))) == -.5 ? true : false) && (isAbs == true) && (showCircle == false);
                    var show0 = ((parseFloat(parm("ampStart", 0))) == 0 ? true : false) && (isAbs == false) && (showCircle == false);
                    var show0Abs = ((parseFloat(parm("ampStart", 0))) == 0 ? true : false) && (isAbs == true) && (showCircle == false);

                    if (!showCircle) document.getElementById('titleCircle').style.display = 'none';
                    if (!showHalf) document.getElementById('titleonehalf').style.display = 'none';
                    if (!showHalfAbs) document.getElementById('titleonehalfabs').style.display = 'none';
                    if (!show0) { document.getElementById('title0').style.display = 'none'; }
                    if (!show0Abs) document.getElementById('title0abs').style.display = 'none';
                </script>

                <script>renderMathInElement(document.body, { delimiters: [{ left: "$$", right: "$$", display: true }, { left: "$", right: "$", display: false }] });</script>
</body>
</div>
</div>
<img src="art/edgeb.png" />
</div>

</html>